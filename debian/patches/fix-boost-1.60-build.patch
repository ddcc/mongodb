From dd882c30a8c02be415eeefe4b39734d85f765787 Mon Sep 17 00:00:00 2001
From: Mark Benvenuto <mark.benvenuto@mongodb.com>
Date: Thu, 31 Mar 2016 15:09:29 -0400
Subject: [PATCH] SERVER-17294 Boost 1.60 Mongo compilation fixes

---
 src/mongo/db/ftdc/compressor.cpp                | 4 ++--
 src/mongo/db/ftdc/compressor_test.cpp           | 2 +-
 src/mongo/db/ftdc/file_writer.cpp               | 2 +-
 src/mongo/util/concurrency/shared_mutex_win.hpp | 8 ++++----
 4 files changed, 8 insertions(+), 8 deletions(-)

--- a/src/mongo/db/ftdc/compressor.cpp
+++ b/src/mongo/db/ftdc/compressor.cpp
@@ -47,7 +47,7 @@
     if (_referenceDoc.isEmpty()) {
         FTDCBSONUtil::extractMetricsFromDocument(sample, sample, &_metrics);
         _reset(sample, date);
-        return {boost::none_t()};
+        return {boost::none};
     }
 
     _metrics.resize(0);
@@ -107,7 +107,7 @@
     }
 
     // The buffer is not full, inform the caller
-    return {boost::none_t()};
+    return {boost::none};
 }
 
 StatusWith<std::tuple<ConstDataRange, Date_t>> FTDCCompressor::getCompressedSamples() {
--- a/src/mongo/db/ftdc/compressor_test.cpp
+++ b/src/mongo/db/ftdc/compressor_test.cpp
@@ -122,7 +122,7 @@
     TestTie() : _compressor(&_config) {}
 
     ~TestTie() {
-        validate(boost::none_t());
+        validate(boost::none);
     }
 
     StatusWith<boost::optional<std::tuple<ConstDataRange, FTDCCompressor::CompressorState, Date_t>>>
--- a/src/mongo/db/ftdc/file_writer.cpp
+++ b/src/mongo/db/ftdc/file_writer.cpp
@@ -211,7 +211,7 @@
 
 Status FTDCFileWriter::close() {
     if (_archiveStream.is_open()) {
-        Status s = flush(boost::none_t(), Date_t());
+        Status s = flush(boost::none, Date_t());
 
         _archiveStream.close();
 
--- a/src/mongo/util/concurrency/shared_mutex_win.hpp
+++ b/src/mongo/util/concurrency/shared_mutex_win.hpp
@@ -175,7 +175,7 @@
                     return true;
                 }
                     
-                unsigned long const res=detail::win32::WaitForSingleObject(unlock_sem,::boost::detail::get_milliseconds_until(wait_until));
+                unsigned long const res=WaitForSingleObject(unlock_sem,::boost::detail::get_milliseconds_until(wait_until));
                 if(res==detail::win32::timeout)
                 {
                     for(;;)
@@ -328,7 +328,7 @@
                 {
                     return true;
                 }
-                unsigned long const wait_res=detail::win32::WaitForMultipleObjects(2,semaphores,true,::boost::detail::get_milliseconds_until(wait_until));
+                unsigned long const wait_res=WaitForMultipleObjects(2,semaphores,true,::boost::detail::get_milliseconds_until(wait_until));
                 if(wait_res==detail::win32::timeout)
                 {
                     for(;;)
@@ -421,7 +421,7 @@
                     return;
                 }
                     
-                BOOST_VERIFY(!detail::win32::WaitForSingleObject(unlock_sem,detail::win32::infinite));
+                BOOST_VERIFY(!WaitForSingleObject(unlock_sem,detail::win32::infinite));
             }
         }
 
@@ -502,7 +502,7 @@
                 {
                     if(!last_reader)
                     {
-                        BOOST_VERIFY(!detail::win32::WaitForSingleObject(upgrade_sem,detail::win32::infinite));
+                        BOOST_VERIFY(!WaitForSingleObject(upgrade_sem,detail::win32::infinite));
                     }
                     break;
                 }
